★JDBCドライバコピー
$ cp mysql-connector-java-5.1.24-bin.jar /usr/lib/hive/lib/

★hiveユーザの作成
$ mysql -u root -p
Enter password:
mysql> CREATE DATABASE metastore;
mysql> USE metastore;
mysql> SOURCE /usr/lib/hive/scripts/metastore/upgrade/mysql/hive-schema-1.1.0.mysql.sql;
mysql> CREATE USER 'hive'@'cdh5-1' IDENTIFIED BY 'hivehive';  ←localhostではなくcdh5-1にすること!!!
mysql> REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'hive'@'cdh5-1';
mysql> GRANT SELECT,INSERT,UPDATE,DELETE,LOCK TABLES,EXECUTE ON metastore.* TO 'hive'@'cdh5-1';
mysql> FLUSH PRIVILEGES;
mysql> quit;

★設定ファイル
$ vi /usr/lib/hive/conf/hive-site.xml

<configuration>
  <property>
    <name>javax.jdo.option.ConnectionURL</name>
    <value>jdbc:mysql://cdh5-1/metastore</value>
  </property>
  <property>
    <name>javax.jdo.option.ConnectionDriverName</name>
    <value>com.mysql.jdbc.Driver</value>
  </property>
  <property>
    <name>javax.jdo.option.ConnectionUserName</name>
    <value>hive</value>
  </property>
  <property>
    <name>javax.jdo.option.ConnectionPassword</name>
    <value>hivehive</value>
  </property>
  <property>
    <name>datanucleus.autoCreateSchema</name>
    <value>false</value>
  </property>
  <property>
    <name>datanucleus.fixedDatastore</name>
    <value>true</value>
  </property>
  <property>
    <name>hive.metastore.uris</name>
    <value>thrift://cdh5-1:9083</value>
  </property>
</configuration>

★hiveコンソールの起動
$ hive  ※Pathが通っているのでこれでOK
$ beeline ← CDH5からはこっち？

★Customer
テーブル作成
hiveコマンドで以下のSQLを実行してテーブル作成する
・CUSTOMERテーブル
hive < /work/init_data/customer/CUSTOMER_DDL_HIVE.sql

・データインポート
hiveコンソールから、以下のようにしてデータをインポートする。
5M件
hive> LOAD DATA LOCAL INPATH '/work/init_data/customer/csv/CUSTOMER_5M.csv' OVERWRITE INTO TABLE CUSTOMER2;

・パラメータ設定
SET mapred.max.split.size=50000000;
# 50MBに分割。データ全体が785MBなので、16スプリットになる。

・SQLの例
SELECT GENDER,JOB_ID,COUNT(*) FROM CUSTOMER2 GROUP BY GENDER,JOB_ID;
SELECT GENDER,AGE,JOB_ID,COUNT(*) FROM CUSTOMER2 GROUP BY GENDER,AGE,JOB_ID;
SELECT COUNT(*) FROM CUSTOMER2 WHERE CUSTOMER_NAME LIKE '%ひろ%';

★SalesOne
・テーブル作成、データインポート
cd /work/init_data/sales_one
hive < SALES_ONE_DDL_HIVE.sql
hive < SALES_ONE_IMPORT_TO_HIVE.sql

・SQLの例(1)
SELECT PRODUCT_ID, COUNT(*) FROM SALES_ONE
WHERE PRODUCT_ID LIKE 'A-%'
GROUP BY PRODUCT_ID;

・SQLの例(2)
SELECT REGEXP_REPLACE(PRODUCT_ID, '-', ''), COUNT(*) FROM SALES_ONE
WHERE PRODUCT_ID LIKE 'A-%'
GROUP BY PRODUCT_ID;

・テーブル作成、データインポート（Parquet）
cd /work/init_data/sales_one
hive < SALES_ONE_DDL_HIVE_PARQUET.sql
hive < SALES_ONE_IMPORT_TO_HIVE_PARQUET.sql

★Sales
・テーブル作成、データインポート
cd /work/init_data/sales
hive < SALES_DDL_HIVE.sql
./sales_clean_hive.sh
hive < SALES_IMPORT_TO_HIVE.sql

・SQLの例
2テーブル結合
SELECT C.AGE, COUNT(*) FROM SALES_TRAN S JOIN CUSTOMER C ON S.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.AGE;

★Sales Big
・テーブル作成、データインポート
cd /work/init_data/sales_big
hive < SALES_DDL_HIVE.sql
hive < SALES_IMPORT_TO_HIVE.sql

・SQLの例
2テーブル結合
SELECT C.AGE, COUNT(*) FROM SALES_TRAN S JOIN CUSTOMER C ON S.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.AGE;

・テーブル作成、データインポート（Parquet）
hive < SALES_DDL_HIVE_PARQUET.sql
hive < SALES_IMPORT_TO_HIVE_PARQUET.sql

★Sales B2B
・テーブル作成、データインポート
cd /work/init_data/sales_b2b
hive < SALES_B2B_DDL_HIVE.sql
hive < SALES_B2B_IMPORT_TO_HIVE.sql

・SQLの例
SELECT ST.CUSTOMER_ID, SD.PRODUCT_ID, COUNT(*) FROM SALES_TRAN ST JOIN SALES_DETAIL SD ON ST.SALES_ID = SD.SALES_ID
WHERE '2011-01-01' <= ST.SALES_DATE AND ST.SALES_DATE <= '2011-12-31'
GROUP BY ST.CUSTOMER_ID, SD.PRODUCT_ID;

// 2015年1月の売り上げが大きい顧客（大きい方ら順にソートして表示）
SELECT ST.CUSTOMER_ID, SUM(SD.PRODUCT_PRICE * SD.SALES_COUNT) SALES_AMOUNT
FROM SALES_TRAN ST
INNER JOIN SALES_DETAIL SD ON ST.SALES_ID = SD.SALES_ID
WHERE YEAR(ST.SALES_DATE) = '2015' AND MONTH(ST.SALES_DATE) = '01'
GROUP BY ST.CUSTOMER_ID
ORDER BY SALES_AMOUNT DESC;

// 2015年1月の前年同月と比べて売り上げが伸びた顧客
方法その1：ビューを使う
CREATE VIEW THIS_SALES
AS SELECT ST.CUSTOMER_ID, SUM(SD.PRODUCT_PRICE * SD.SALES_COUNT) AS SALES_AMOUNT
FROM SALES_TRAN ST INNER JOIN SALES_DETAIL SD
ON ST.SALES_ID = SD.SALES_ID
WHERE YEAR(ST.SALES_DATE) = '2015' AND MONTH(ST.SALES_DATE) = '01'
GROUP BY ST.CUSTOMER_ID;

CREATE VIEW PREV_SALES
AS SELECT ST.CUSTOMER_ID, SUM(SD.PRODUCT_PRICE * SD.SALES_COUNT) AS SALES_AMOUNT
FROM SALES_TRAN ST INNER JOIN SALES_DETAIL SD
ON ST.SALES_ID = SD.SALES_ID
WHERE YEAR(ST.SALES_DATE) = '2014' AND MONTH(ST.SALES_DATE) = '01'
GROUP BY ST.CUSTOMER_ID;

SELECT THIS_SALES.CUSTOMER_ID, THIS_SALES.SALES_AMOUNT, PREV_SALES.SALES_AMOUNT,
THIS_SALES.SALES_AMOUNT - PREV_SALES.SALES_AMOUNT AS SALES_AMOUNT_DIFF
FROM THIS_SALES INNER JOIN PREV_SALES
ON THIS_SALES.CUSTOMER_ID = PREV_SALES.CUSTOMER_ID
ORDER BY SALES_AMOUNT_DIFF DESC;

方法その2：多段ジョイン
SELECT ST1.CUSTOMER_ID, SUM(SD1.PRODUCT_PRICE * SD1.SALES_COUNT) THIS_SALES_AMOUNT,
PREV_SALES_AMOUNT,
SUM(SD1.PRODUCT_PRICE * SD1.SALES_COUNT) - PREV_SALES_AMOUNT SALES_AMOUNT_DIFF
FROM SALES_TRAN ST1
INNER JOIN SALES_DETAIL SD1 ON ST1.SALES_ID = SD1.SALES_ID
INNER JOIN (
    SELECT ST2.CUSTOMER_ID, SUM(SD2.PRODUCT_PRICE * SD2.SALES_COUNT) PREV_SALES_AMOUNT
    FROM SALES_TRAN ST2 INNER JOIN SALES_DETAIL SD2 ON ST2.SALES_ID = SD2.SALES_ID
    WHERE YEAR(ST2.SALES_DATE) = '2014' AND MONTH(ST2.SALES_DATE) = '01'
    GROUP BY ST2.CUSTOMER_ID
    ) PREV
ON ST1.CUSTOMER_ID = PREV.CUSTOMER_ID
WHERE YEAR(ST1.SALES_DATE) = '2015' AND MONTH(ST1.SALES_DATE) = '01'
GROUP BY ST1.CUSTOMER_ID, PREV_SALES_AMOUNT
ORDER BY SALES_AMOUNT_DIFF DESC;

監視
tail -f /var/log/hadoop-yarn/containers/application_*/container_*/syslog

